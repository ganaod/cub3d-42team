# --- Project / compiler settings ---
NAME        = cub3D
TEST_NAME   = test
CC          = cc
CFLAGS      = -Wall -Wextra -Werror -MMD -MP

# --- Library directories (matches the tree you posted) ---
LIBFT_PATH  = ./lib/libft/libft
PRINTF_PATH = ./lib/libft/ft_printf
GNL_PATH    = ./lib/libft/gnl
MLX_PATH    = ./lib/MLX42
MLX_BUILD   = $(MLX_PATH)/build

# --- Library artifacts (where each library produces its .a) ---
LIBFT_A     = $(LIBFT_PATH)/libft.a
PRINTF_A    = $(PRINTF_PATH)/libftprintf.a
GNL_A       = $(GNL_PATH)/libgnl.a
MLX_A       = $(MLX_BUILD)/libmlx42.a

# --- Include paths for compilation ---
INCLUDES    = -I ./include -I $(MLX_PATH)/include -I $(LIBFT_PATH)/include

# --- Linker flags / libraries ---
LIBRARIES   = -L$(LIBFT_PATH) -lft \
			  -L$(PRINTF_PATH) -lftprintf \
			  -L$(GNL_PATH) -lgnl \
			  -L$(MLX_BUILD) -lmlx42 -lglfw -ldl -pthread -lm

# --- Sources / objects ---
SRC_DIR     = src
OBJ_DIR     = obj

SRC_FILES   =	main.c \
				global_state.c \
				parse_utils.c \
				parse_header.c \
				parse_header_lines.c \
				parse_header_utils.c \
				collect_map_lines.c \
				collect_map_lines_utils.c \
				collect_map_lines_core.c \
				normalize_map.c \
				map_grid_cells.c \
				map_grid_fill.c \
				map_grid_build.c \
				map_check_flood.c \
				map_check_utils.c \
				utils.c \
				map_check.c \
				parse_paths_check.c \
				render.c \
				render_column.c \
				render_dda.c \
				render_dda_setup.c \
				render_pixel_buffer.c \
				render_projection.c \
				render_ray_cast.c \
				player.c \
				player_utils.c \
				render_texture.c

SRCS        = $(addprefix $(SRC_DIR)/, $(SRC_FILES))
OBJS        = $(addprefix $(OBJ_DIR)/, $(SRC_FILES:.c=.o))

# --- PID file for the build spinner ---
PIDFILE     = .build_bar_pid

# --- PHONY targets ---
.PHONY: all start_bar post libs clean fclean re $(LIBFT_A) $(PRINTF_A) $(GNL_A) $(MLX_A)

# --- Top-level: start spinner, build everything, then stop spinner & show summary ---
# 'all' is start_bar + post. 'post' depends on $(NAME), so building $(NAME) (and its prerequisites) happens
# while the spinner started by start_bar is running.
all: start_bar post

# Start a spinner/progress indicator in background that will live for the duration of the top-level make.
# The spinner checks that the top-level make process is still alive (kill -0 $$MAKEPID), so it auto-exits
# if make dies. This keeps the spinner from being orphaned on failure.
start_bar:
	@{ \
		MAKEPID=$$PPID; \
		printf "\n"; \
		( while kill -0 $$MAKEPID 2>/dev/null; do \
				for c in '|' '/' '-' '\\'; do \
					printf "\r\033[1m\033[38;5;117mBuilding cub3D: [ %s ]\033[0m" "$$c"; \
					sleep 0.08; \
				done; \
		  done ) & echo $$! > $(PIDFILE); \
	}

# 'post' depends on the final binary. When $(NAME) is ready, the recipe kills the spinner and prints the final summary.
post: $(NAME)
	@{ \
		if [ -f $(PIDFILE) ]; then kill `cat $(PIDFILE)` 2>/dev/null || true; rm -f $(PIDFILE); fi; \
		printf "\r\033[1m\033[38;5;117mBuilding cub3D: [ DONE ]\033[0m\n"; \
		printf "\033[1;34m Built $(NAME) successfully!\033[0m\n"; \
	}

# --- Main link rule: depends on objects and libraries ---
$(NAME): $(OBJS) $(LIBFT_A) $(PRINTF_A) $(GNL_A) $(MLX_A)
	@$(CC) -g -fsanitize=address $(OBJS) $(LIBRARIES) -o $(NAME)

# --- Object compilation (silent, but will show compiler errors) ---
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c | $(OBJ_DIR)
	@$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDES)

# Ensure object dir exists
$(OBJ_DIR):
	@mkdir -p $(OBJ_DIR)

# Include dependency files generated by -MMD -MP
-include $(OBJS:.o=.d)

# --- Library build rules (silent builds, single confirmation each) ---
$(LIBFT_A):
	@$(MAKE) -s -C $(LIBFT_PATH) --no-print-directory
	@printf "\033[1;36mLibft ready!\033[0m\n"

$(PRINTF_A):
	@$(MAKE) -s -C $(PRINTF_PATH) --no-print-directory
	@printf "\033[1;36mFt_printf ready!\033[0m\n"

$(GNL_A):
	@$(MAKE) -s -C $(GNL_PATH) --no-print-directory
	@printf "\033[1;36mGNL ready!\033[0m\n"

# MLX: run cmake configure + build silently
$(MLX_A):
	@mkdir -p $(MLX_BUILD)
	@cmake -S $(MLX_PATH) -B $(MLX_BUILD) -Wno-dev >/dev/null 2>&1 || true
	@$(MAKE) -s -C $(MLX_BUILD) --no-print-directory >/dev/null 2>&1 || true
	@printf "\033[1;36mMLX42 ready!\033[0m\n"

# --- Cleaning ---
clean:
	@rm -rf $(OBJ_DIR)
	@$(MAKE) -s -C $(LIBFT_PATH) clean --no-print-directory || true
	@$(MAKE) -s -C $(PRINTF_PATH) clean --no-print-directory || true
	@$(MAKE) -s -C $(GNL_PATH) clean --no-print-directory || true
	@printf "ðŸ§¹ Cleaned object files\n"

fclean: clean
	@rm -f $(NAME) $(TEST_NAME)
	@$(MAKE) -s -C $(LIBFT_PATH) fclean --no-print-directory || true
	@$(MAKE) -s -C $(PRINTF_PATH) fclean --no-print-directory || true
	@$(MAKE) -s -C $(GNL_PATH) fclean --no-print-directory || true
	@rm -rf $(MLX_BUILD)
	@printf "ðŸ”¥ Fully cleaned $(NAME)!\n"

re: fclean all
